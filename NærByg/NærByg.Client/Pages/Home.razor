@page "/"
@rendermode InteractiveWebAssembly
@using NærByg.Client.Services
@using Shared.DTOs
@using System.Globalization
@using Microsoft.AspNetCore.WebUtilities
@inject APIService APIService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Hjem</PageTitle>

<div class="container text-center">
    @if (RemoveAfterSearch)
    {
        <!-- fill for the website design -->
        <div class="row rowFillsTop">
            <div class="col-12"></div>
        </div>
    }

    <!-- Container with the input fields, button and range slider -->
    <div class="container">
        <div class="row">
            <div class="col-12 mt-5">
                <div class="row">
                    <div class="col-12">
                        <div class="search-wrapper">
                            <input type="text" class="input-search mx-auto w-100" @bind-value="SearchItemInput" @bind-value:event="oninput" @onkeydown="HandleKeyPress" placeholder="Søg efter et produkt..">
                            <button @onclick="SearchItem" class="btn-search"><i class="fas fa-search"></i></button>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="mt-3">
                            <input class="input-address" type="text" id="adresseFormControlInput" @bind-value:event="oninput" @onkeydown="HandleKeyPress" @bind-value="AdresseInput" placeholder="Adresse">
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 p-1">
                        <div class="d-flex justify-content-between align-items-center m-2">
                            <label for="kmRange" class="form-label mb-0">Kilometer radius</label>
                            <!--<label class="form-label mb-0" @bind="kmRadiusValue">Valgt kilometer: <span id="kmValue">50</span> km</label>-->
                            <label class="form-label mb-0">Valgt kilometer: @kmRadiusValue km</label>
                        </div>
                        <input type="range" class="form-range" min="0" max="100" id="kmRange" @bind="kmRadiusValue" @oninput="AdjustSliderValue">
                    </div><!--oninput="adjustSliderValueVisual()"-->
                    @if (IsLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(AlertMessage))
    {
        <div class="container">
            <div class="alert @AlertType alert-dismissible fade show text-center" role="alert">
                @AlertMessage
            </div>

        </div>
    }
    <div class="container">
        <div class="row">
            <div class="col-1 col-md-1"></div>
            <div class="col-10 col-md-10 mt-5">
                <!-- Loop through items -->
                @if (ProductListTrue)
                {
                    <div>
                        <p>Du har søgt på "@SearchedItemLabel"</p>
                    </div>
                    @foreach (var product in ProductListItems)
                    {
                        <div class="cardProductList" @onclick="() => ShowOverlay(product)">
                            <div class="row">
                                <div class="col-md-4 d-flex align-items-center justify-content-center">
                                    <img src="@($"product_pictures/{product.PictureURL}")" class="productImg" alt="...">
                                </div>
                                <div class="col-md-8">
                                    <div class="row">
                                        <div class="col-md-3">
                                        </div>
                                        <div class="col-md-9 cardTitle">
                                            <h6>@product.Brand @product.ProductName</h6>
                                        </div>
                                    </div>
                                    <div class="cardBody">
                                        <div class="row">
                                            <div class="col-sm-5 cardBodyText"><p>Afstand: @(product.DistanceToShop > 0 ? $"{product.DistanceToShop} km" : "--")</p></div>
                                            <div class="col-sm-7 cardBodyText"><p>Varenr: @product.ProductSku</p></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-5 cardBodyText"><p>Pris: @product.Price kr.</p></div>
                                            <div class="col-sm-7 cardBodyText"><p>Butik: @product.ShopName</p></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-5 cardBodyText"><p>Antal: @product.Stock stk.</p></div>
                                            <div class="col-sm-7 cardBodyText"><p>Adresse: @product.ShopAddress, @product.ShopPostArea @product.ShopCity</p></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="col-1 col-md-1"></div>
        </div>
    </div>

    <ProductInfoOverlay Product="selectedProduct"
                        InputAdress="@AdresseInput"
                        IsVisible="@showOverlay"
                        OnClose="CloseOverlay">
    </ProductInfoOverlay>

    <!-- fill for the website design -->
    <div class="row rowFillsBottom">
        <div class="col-12 myBorder"></div>
    </div>


</div>
<script>
    function adjustSliderValueVisual() {
        const slider = document.getElementById('kmRange');
        const valueDisplay = document.getElementById('kmValue');
        let value = parseInt(slider.value);

        if (value <= 20) {
            value = Math.round(value / 2) * 2;
        } else if (value <= 50) {
            value = Math.round(value / 5) * 5;
        } else {
            value = Math.round(value / 10) * 10;
        }
        valueDisplay.innerText = value;
        slider.value = value;
    }
</script>

@code {
    private bool RemoveAfterSearch { get; set; } = true;
    private bool ProductListTrue { get; set; } = false;
    private bool showOverlay = false;

    private bool IsLoading { get; set; }
    private bool IsLoadingPage { get; set; } = true;
    private string AlertMessage { get; set; } = string.Empty;
    private string AlertType { get; set; } = string.Empty;
    private string SearchItemInput { get; set; } = string.Empty;
    private string AdresseInput { get; set; } = string.Empty;
    private string kmRadiusValue { get; set; } = "50";
    private string DistanceToShop { get; set; } = string.Empty;
    private int? SelectedCategoryId { get; set; }
    private string? SelectedCategoryName { get; set; }
    private string SearchedItemLabel { get; set; } = string.Empty;

    private List<ProductResponse> ProductListItems { get; set; } = new List<ProductResponse>();

    private ProductRequest _ProductsRequest = new ProductRequest
        {
            SearchTerm = string.Empty,
            Category = 0
        };

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += HandleLocationChanged;
        await ReadQuery();
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        _ = InvokeAsync(async () => await ReadQuery());
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        // Form element for login should be able to logon the user with "Enter" key pressed
        if (e.Key == "Enter")
        {
            await SearchItem();
        }
    }

    private async Task SearchItem()
    {
        IsLoading = true;
        SearchedItemLabel = string.Empty;
        try
        {
            var request = new ProductRequest
                {
                    SearchTerm = SearchItemInput,
                    Category = SelectedCategoryId
                };

            List<ProductResponse> productsResponse = await APIService.GetProductsFromSearched(request);

            ProductListItems = productsResponse;

            await AddDistanceToProducts(ProductListItems);

            FilterAndOrder(ProductListItems);

            if (SearchItemInput is null || SearchItemInput == "")
                SearchedItemLabel = SelectedCategoryName;
            else
                SearchedItemLabel = SearchItemInput;

            RemoveAfterSearch = false;
            ProductListTrue = true;
            IsLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AlertWithTimer($"{ex.Message}.", 5);
            AlertType = "alert-danger";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task AddDistanceToProducts(List<ProductResponse> products)
    {
        var tasks = products.Select(async p =>
        {
            try
            {
                var res = await APIService.GoogleMatrixAPI(AdresseInput, p.ShopAddress, p.ShopPostArea);
                var distanceText = res?.rows?[0]?.elements?[0]?.distance?.text;

                // Convert distanceText to double (e.g. "12.3 km" => 12.3)
                p.DistanceToShop = double.Parse(distanceText.Replace(" km", "").Trim(), CultureInfo.InvariantCulture);
            }
            catch
            {
                p.DistanceToShop = 0;
            }
        });

        await Task.WhenAll(tasks);
    }

    private void FilterAndOrder(List<ProductResponse> products)
    {
        ProductListItems.RemoveAll(p => p.DistanceToShop > kmRadiusDisplay);

        if (AdresseInput is null)
            ProductListItems = ProductListItems.OrderBy(p => p.Price).ToList();
        else
            ProductListItems = ProductListItems.OrderBy(p => p.DistanceToShop).ToList();
    }

    private ProductResponse? selectedProduct;
    private void ShowOverlay(ProductResponse product)
    {        
        selectedProduct = product;
        showOverlay = true;
    }

    private void CloseOverlay()
    {
        showOverlay = false;
        selectedProduct = null;
    }

    private void ClearAlert()
    {
        AlertMessage = string.Empty;
    }

    private async void AlertWithTimer(string alertMessage, double timeInSeconds)
    {
        AlertMessage = alertMessage;

        // Wait for the specified time (converted to milliseconds)
        await Task.Delay(TimeSpan.FromSeconds(timeInSeconds));

        ClearAlert();

        await InvokeAsync(StateHasChanged);
    }

    private int kmRadiusDisplay = 50;
    private void AdjustSliderValue(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int rawValue))
        {
            if (rawValue <= 20)
                kmRadiusDisplay = (int)Math.Round(rawValue / 2.0) * 2;
            else if (rawValue <= 50)
                kmRadiusDisplay = (int)Math.Round(rawValue / 5.0) * 5;
            else
                kmRadiusDisplay = (int)Math.Round(rawValue / 10.0) * 10;

            kmRadiusValue = Convert.ToString(kmRadiusDisplay);
        }
    }

    private async Task ReadQuery()
    {
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("category", out var categoryValue) && int.TryParse(categoryValue, out var catId))
        {
            SelectedCategoryId = catId;
            SelectedCategoryName = query.TryGetValue("name", out var nameVal) ? nameVal.ToString() : "";

            Console.WriteLine($"Kategori valgt: {SelectedCategoryId} - {SelectedCategoryName}");

            await SearchItem();
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}
