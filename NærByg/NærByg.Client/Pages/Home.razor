@page "/"
@rendermode InteractiveWebAssembly
@using NærByg.Client.Services
@using Shared.DTOs
@inject APIService APIService
@inject IJSRuntime JSRuntime

<PageTitle>Hjem</PageTitle>

<div class="container text-center">
    @if (RemoveAfterSearch)
    {
        <!-- fill for the website design -->
        <div class="row rowFills">
            <div class="col-6"></div>
            <div class="col-6"></div>
        </div>
    }
    <!-- Container with the input fields, button and range slider -->
    <div class="container">
        <div class="row">
            <div class="col-1 col-md-2 myBorder"></div>
            <div class="col-10 col-md-8 mt-5 myBorder">
                <div class="container">
                    <div class="row">
                        <div class="col-3 col-md-3 myBorder"></div>
                        <div class="col-6 col-sm-6 myBorder">
                            <div class="search-box">
                                <input type="text" class="input-search" @bind-value="SearchItemInput" @bind-value:event="oninput" @onkeydown="HandleKeyPress" placeholder="Søg efter et produkt..">
                            </div>
                        </div>
                        <div class="col-1 col-sm-1 myBorder">
                            <div class="search-box">
                                <button @onclick="SearchItem" class="btn-search"><i class="fas fa-search"></i></button>
                            </div>
                        </div>
                        <div class="col-2 col-md-2 myBorder"></div>
                    </div>
                </div>
                <div class="container">
                    <div class="row">
                        <div class="col-3 col-md-3 myBorder"></div>
                        <div class="col-6 col-md-6 p-1 myBorder">
                            <div class="mt-3 myBorder">
                                <input class="input-search" type="text" id="adresseFormControlInput" @bind-value:event="oninput" @onkeydown="HandleKeyPress" @bind-value="AdresseInput" placeholder="Adresse">
                            </div>
                        </div>
                        <div class="col-3 col-md-3 myBorder"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 myBorder p-1">
                        <div class="d-flex justify-content-between align-items-center m-2">
                            <label for="kmRange" class="form-label mb-0">Kilometer radius</label>
                            <label class="form-label mb-0" @bind="kmRadiusValue">Valgt kilometer: <span id="kmValue">50</span> km</label>
                        </div>
                        <input type="range" class="form-range" min="0" max="100" step="1" id="kmRange" oninput="adjustSliderValue()">
                    </div>
                    @if (IsLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-1 col-md-2 myBorder"></div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-1 col-md-2"></div>
            <div class="col-10 col-md-8 mt-5">
                <!-- Loop through items -->
                @if (ProductListTrue)
                {
                    @foreach (var product in ProductListItems)
                    {
                        <div class="cardProductList container-fluid">
                            <div class="row">
                                <div class="col-md-4 d-flex align-items-center justify-content-center">
                                    <img src="@($"https://www.nærbyg.dk/product_pictures/{product.PictureURL}")" class="productImg" alt="...">
                                </div>
                                <div class="col-md-8">
                                    <div class="row">
                                        <div class="col-md-3">
                                        </div>
                                        <div class="col-md-9 cardTitle">
                                            <h6>@product.Brand @product.ProductName</h6>
                                        </div>
                                    </div>
                                    <div class="cardBody">
                                        <div class="row">
                                            <div class="col-md-6 cardBodyText"><p>Afstand: @product.DistanceToShop</p></div>
                                            <div class="col-md-6 cardBodyText"><p>Varenr: @product.ProductSku</p></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 cardBodyText"><p>Pris: @product.Price kr.</p></div>
                                            <div class="col-md-6 cardBodyText"><p>Butik: @product.ShopName</p></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 cardBodyText"><p>Antal: @product.Stock stk.</p></div>
                                            <div class="col-md-6 cardBodyText"><p>Adresse: @product.ShopAddress</p></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                <div class="col-1 col-md-2 myBorder"></div>
            </div>
        </div>
    </div>

    <!-- Loop through items end -->
    <!-- fill for the website design -->
    <div class="row rowFills">
        <div class="col-6 myBorder"></div>
        <div class="col-6 myBorder"></div>
    </div>


</div>
<script>
    function adjustSliderValue() {
        const slider = document.getElementById('kmRange');
        const valueDisplay = document.getElementById('kmValue');
        let value = parseInt(slider.value);

        if (value <= 20) {
            value = Math.round(value / 2) * 2;
        } else if (value <= 50) {
            value = Math.round(value / 5) * 5;
        } else {
            value = Math.round(value / 10) * 10;
        }
        valueDisplay.innerText = value;
        slider.value = value;
    }
</script>

<!--
    <iframe
    width="1000"
    height="600"
    frameborder="0" style="border:0"
    referrerpolicy="no-referrer-when-downgrade"
    src="https://www.google.com/maps/embed/v1/directions
        ?key=AIzaSyDKO6ebfn7HyqxC20WyE16paoRSZE86fQw
        &origin=NykøbingFalster+Denmark
        &destination=Ringsted+Denmark
        &avoid=tolls|highways"
    allowfullscreen>
    </iframe> -->
<!-- Routes map API key: AIzaSyDKO6ebfn7HyqxC20WyE16paoRSZE86fQw
     Distance Matrix API key: AIzaSyBmuwpJh08co2X-MsuBZvUMNvh-zCp_t2E
-->
@code {
    private bool RemoveAfterSearch { get; set; } = true;
    private bool ProductListTrue { get; set; } = false;
    private bool IsLoading { get; set; }
    private bool IsLoadingPage { get; set; } = true;
    private string AlertMessage { get; set; } = string.Empty;
    private string AlertType { get; set; } = string.Empty;
    private string SearchItemInput { get; set; } = string.Empty;
    private string AdresseInput { get; set; } = string.Empty;
    private string kmRadiusValue { get; set; } = string.Empty;
    private string DistanceToShop { get; set; } = string.Empty;

    private List<ProductResponse> ProductListItems { get; set; } = new List<ProductResponse>();
    private ProductRequest _ProductsRequest = new ProductRequest
        {
            SearchTerm = string.Empty
        };

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        // Form element for login should be able to logon the user with "Enter" key pressed
        if (e.Key == "Enter")
        {
            await SearchItem();
        }
    }

    private async Task SearchItem()
    {
        IsLoading = true;
        try
        {
            var request = new ProductRequest
                {
                    SearchTerm = SearchItemInput
                };

            List<ProductsResponse> productsResponse = await APIService.GetProductsFromSearched(request);

            if (productsResponse != null && productsResponse.Count > 0)
            {
                ProductListItems = productsResponse;

                foreach (var product in ProductListItems)
                {
                    var response = await APIService.GoogleMatrixAPI(AdresseInput, product.ShopAddress, product.ShopPostArea);

                    product.DistanceToShop = response.rows[0].elements[0].distance.text;

                    if (product.DistanceToShop is null || string.IsNullOrEmpty(product.DistanceToShop))
                    {
                        product.DistanceToShop = "--";
                    }

                    //var durationText = googleResponse.rows[0].elements[0].duration.text;
                }
                RemoveAfterSearch = false;
                ProductListTrue = true;
                StateHasChanged();
            }
            else
            {
                AlertWithTimer("Ingen produkter fundet...", 3);
                AlertType = "alert-warning";
            }
        }
        catch (Exception ex)
        {
            AlertWithTimer($"{ex.Message}", 5);
            AlertType = "alert-danger";
        }
        finally
        {
            IsLoading = false;
        }

    }

    /*private async Task<string> CalculateDistance(string shopAddress, string ShopPostArea)
    {
        IsLoading = true;
        try
        {
            var googleResponse = await APIService.CalculateDistanceGoogle(AdresseInput, shopAddress, ShopPostArea);

            DistanceToShop = googleResponse.rows[0].elements[0].distance.text;
            //var durationText = googleResponse.rows[0].elements[0].duration.text;
            return DistanceToShop;
        }
        catch (Exception ex)
        {
            return "--";
        }
        finally
        {
            IsLoading = false;
        }
    }*/

    private void ClearAlert()
    {
        AlertMessage = string.Empty;
    }

    private async void AlertWithTimer(string alertMessage, double timeInSeconds)
    {
        AlertMessage = alertMessage;

        // Wait for the specified time (converted to milliseconds)
        await Task.Delay(TimeSpan.FromSeconds(timeInSeconds));

        ClearAlert();

        await InvokeAsync(StateHasChanged);
    }
}
